<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace命名空间，作用就是对sql进行分类管理,理解sql隔离
注意:使用mapper开发，命名空间具有特殊的作用，namespce等于mapper的接口地址 
 -->
<mapper namespace="cn.dong111.mapper.UserMapper">
	

<!-- 定义sql片段
	id:sql片段的唯一标识符
		经验：是基于单表来定义sql片段，这样话这个sql片段可重用性才高
	在sql片段中不要包括 where
 -->
	<sql id="query_user_where">
				<if test="userCustom.sex!=null and userCustom.sex!=''">
				and user.sex = #{userCustom.sex}
			</if>
			<if test="userCustom.username!=null and userCustom.username!=''">
				and user.username LIKE '%${userCustom.username}%'
			</if>
			<if test="ids!=null">
			<!-- 使用foreache 遍历传入的ids
				collection :指定输入对象中集合的熟悉
				item:每个遍历生成对象中
				open:开始遍历时拼接的串
				close:结束遍历时拼接串
				separator:遍历的两个对象中需要拼接的串
			 -->
			 
			 
			 <!-- 使用实现下边sql的拼接
			 	AND (id = 1 OR id = 10 OR id = 16)
			  -->
			  
			  <foreach collection="ids" item="userId" open="AND (" close=")" separator="or">
			  	<!-- 每个遍历需要拼接的串 -->
			  	id = #{userId}
			  </foreach>
			  
			  <!-- 实现 " and id IN (1,10,16)"拼接 -->
			<!-- 			
			  <foreach collection="ids" item="userId" open="and id IN (" close=")" separator=",">
			  	每个遍历需要拼接的串
			  	#{userId}
			  </foreach> -->
			  
			</if>
	</sql>

	<!-- 定义resultMap    **这个功能个人觉得可以用别名代替
	将SELECT id id_,username username_ FROM USER 和User类中的属性作一个映射关系
	
	type：resultMap最终映射的java对象类型,可以使用别名
	id：对resultMap的唯一标识
	 -->
	<resultMap type="user" id="userResultMap">
	<!-- id 表铸剑Id
		column:查询出来的列名
		property : type指定pojo属性名称
		最终resultMap对column和property做了一个映射关系 
	 -->
	<id column="id_" property="id" />
	
		<!-- 
	 	result：对普通名映射定义
	 	column：查询出来的列名
	 	property：type指定的pojo类型中的属性名
	 	最终resultMap对column和property作一个映射关系 （对应关系）
	 	 -->
	<result column="username_" property="username"/>
	
	</resultMap>


	<!--  查询符合条件的userlist-->
	<select id="findUserList"  parameterType="cn.dong111.pojo.UserQueryVo" resultType="cn.dong111.pojo.UserCustom">
		SELECT * FROM user
		<!-- 
			where在这里的作用可以去掉第一个and 连接符号
		 -->
		<where>
			<include refid="query_user_where"></include>
		</where>
	</select>
	
	<select id="findUserCount" parameterType="cn.dong111.pojo.UserQueryVo" resultType="int">
			 SELECT count(*) FROM user
		<where>
		<!-- 引用sql片段 的id，如果refid指定的id不在本mapper文件中，需要前边加namespace -->
			<include refid="query_user_where"></include>
		</where>
	</select>



	<!-- 在 映射文件中配置很多sql语句 -->
	<!-- 需求：通过id查询用户表的记录 -->
	<!-- 通过 select执行数据库查询
	id：标识 映射文件中的 sql
	将sql语句封装到mappedStatement对象中，所以将id称为statement的id
	parameterType：指定输入 参数的类型，这里指定int型 
	#{}表示一个占位符号
	#{id}：其中的id表示接收输入 的参数，参数名称就是id，如果输入 参数是简单类型，#{}中的参数名可以任意，可以value或其它名称
	
	resultType：指定sql输出结果 的所映射的java对象类型，select指定resultType表示将单条记录映射成的java对象。
	 -->
	<select id="findUserById" parameterType="int" resultType="user">
		SELECT * FROM user WHERE id=#{value}
	</select>
	
	
	<!-- 使用resultMap进行输出映射
	resultMap：指定定义的resultMap的id，如果这个resultMap在其它的mapper文件，前边需要加namespace
	-->
	<select id="findUserByResultMap" parameterType="int" resultMap="userResultMap">
			SELECT id id_,username username_ FROM user WHERE id=#{value}
	</select>
	
	
	<!-- 根据用户名称模糊查询用户信息，可能返回多条
			resultType：指定就是单条记录所映射的java对象 类型
			${}:表示拼接sql串，将接收到参数的内容不加任何修饰拼接在sql中。
			使用${}拼接sql，引起 sql注入
			${value}：接收输入 参数的内容，如果传入类型是简单类型，${}中只能使用value
	 -->
	<select id="findUserByName" parameterType="java.lang.String" resultType="user">
		<!--SELECT * FROM user WHERE username like '%${value}%'   这样写只能在java方法调用时候来防止sql注入 -->
		<!-- 如果要在sql中防止sql注入  只能使用#{}占位符来拼接%来like查询 不能使用拼接符号${} -->
		<!-- SELECT * FROM user WHERE username LIKE '%' || #{value} || '%' oracle字符串拼接占位符防止注入 -->
		<!-- SELECT * FROM user WHERE username LIKE '%' + #{value} + '%'  sqlServer字符串拼接占位符防止注入 -->
		<!-- mysql字符串拼接占位符防止注入 -->
		 SELECT * FROM user WHERE username LIKE concat('%', #{name}, '%') 
	</select>
	
	<!-- 添加用户 
	parameterType：指定输入 参数类型是pojo（包括 用户信息）
	#{}中指定pojo的属性名，接收到pojo对象的属性值，mybatis通过OGNL获取对象的属性值
	-->
	
	<insert id="insertUser" parameterType="user" >
		<!-- 
		将插入数据的主键返回，返回到user对象中
		
		SELECT LAST_INSERT_ID()：得到刚insert进去记录的主键值，**只适用与自增主键**
		
		keyProperty：将查询到主键值设置到parameterType指定的对象的哪个属性
		order：SELECT LAST_INSERT_ID()执行顺序，相对于insert语句来说它的执行顺序
		resultType：指定SELECT LAST_INSERT_ID()的结果类型
		 -->
	
		<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
			SELECT LAST_INSERT_ID()
		</selectKey>
		insert into user(username,birthday,sex,address) value(#{username},#{birthday},#{sex},#{address})
		
		<!-- 
		使用mysql的uuid（）生成主键
		执行过程：
		首先通过uuid()得到主键，将主键设置到user对象的id属性中
		其次在insert执行时，从user对象中取出id属性值
		 -->
		<!--  <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">
			SELECT uuid()
		</selectKey>
		insert into user(id,username,birthday,sex,address) value(#{id},#{username},#{birthday},#{sex},#{address}) -->
		
		
	</insert>
	
		<!-- 删除 用户
	根据id删除用户，需要输入 id值
	 -->
	<delete id="deleteUser" parameterType="java.lang.Integer">
		delete from user where id=#{id}
	</delete>
	
	<!-- 根据id更新用户
	分析：
	需要传入用户的id
	需要传入用户的更新信息
	parameterType指定user对象，包括 id和更新信息，注意：id必须存在
	#{id}：从输入 user对象中获取id属性值
	 -->
	<update id="updateUser" parameterType="user">
		update user set username=#{username},birthday=#{birthday},sex=#{sex},address=#{address} 
		 where id=#{id}
	</update>
	
	
	

</mapper>