<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"
http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace命名空间:作用就是对sql进行分类化管理，理解sql隔离
注意：使用mapper代理方法开发时候,namespace有着特殊的重要的作用
-->
<mapper namespace="test">
	<!-- 在mapper配置文件中可以配置许多业务需要的sql语句 -->
	<!-- 通过select执行数据库查询
		id:标示映射文件中的sql
		将sql语句封装到mapperStatement对象中,所以id是标示statement的id
		
		#{}标示占位符  #{id}其中id标示输入参数，参数名称就是id
			如果输入的是简单参数，参数名称可以任意指定
		parameterType:指定传入参数类型，这里指定int类型
		
	
		resultType:指定sql输出结果的所有映射的java数据类型，将select的单条结果集映射成java对象
		
	 -->
	<select id="findUserById" parameterType="int" resultType="cn.dong111.pojo.User">
		select * from user where id = #{id}
	</select>
	
	
	<!--根据用户名称模糊查询 
		resultType：指定就是单条记录所映射的java对象 类型
		${}表示拼接sql串,将接收到的参数不加任何修饰添加到sql中
		注意问题: sql注入
		${value} 接收输入参数，如果输入参数是简单数据类型，那么${}中只能是value 关键字
	 -->
	<select id="findUserByUserName" parameterType="java.lang.String" resultType="cn.dong111.pojo.User">
		select * from user where username like '%${value}%'
	</select>
	
	<!-- 
		插入对象:
			parameterType:指定插入对象
			#{}指定pojo的属性名称，接收pojo对象的属性值，mybatis通过OGNL获取对象属性
	 -->
	<insert id="inserUser" parameterType="cn.dong111.pojo.User">
	
	<!--插入对象主键返回 返回到user对象中
		SELECT LAST_INSERT_ID()：得到刚insert进去记录的主键值，只适用与自增主键
		
		keyProperty：将查询到主键值设置到parameterType指定的对象的哪个属性
		order :	SELECT LAST_INSERT_ID() 的执行顺序,相对于insert语句来说它的执行顺序
		resultType :返回数据结果类型
	 -->
		<selectKey keyProperty="id" order="AFTER" resultType="int">
			SELECT LAST_INSERT_ID() 
		</selectKey>
	
		insert user(username,sex,birthday,address)
				value(#{username},#{sex},#{birthday},#{address})
				
		<!--  //:TODO 需要测试  未通过测试
		使用mysql的uuid（）生成主键
		执行过程：
		首先通过uuid()得到主键，将主键设置到user对象的id属性中
		其次在insert执行时，从user对象中取出id属性值
		 -->
		<!--  <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">
			SELECT uuid()
		</selectKey>
		insert into user(id,username,birthday,sex,address) value(#{id},#{username},#{birthday},#{sex},#{address}) -->
				
	</insert>
	
	<!-- 删除程序
	
	 -->
	<delete id="delUserById" parameterType="int" >
	 	DELETE FROM user where id = #{id}
	</delete>
	
	
	<!--更新用户信息
	需要传入用户的id
	需要传入用户的更新信息
	parameterType指定user对象，包括 id和更新信息，注意：id必须存在
	#{id}：从输入 user对象中获取id属性值
	  -->
	<update id="updateUser" parameterType="cn.dong111.pojo.User">
		UPDATE user SET username=#{username},birthday=#{birthday},sex=#{sex},address=#{address} 
		 WHERE id=#{id}
	</update>
	
	
	
	
	
	
	
	
	
</mapper>


